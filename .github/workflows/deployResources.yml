name: Deploy Resources

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP_NAME: webapparmtestrg
  AZURE_LOCATION: eastus
  AZURE_HOSTING_PLAN: ASP-webapparmtestrg-a7c7
  # web apps
  AZURE_WEBAPI_NAME: webapparmtestapiwebapp
  AZURE_UI_NAME: uiarmtestapiwebapp
  AZURE_BACKGROUND_API_NAME: backgroundarmtestapiwebapp
  # blob
  AZURE_BLOB_NAME: webapparmtestblob
  AZURE_BLOB_CONTAINER_NAME: cache
  # service bus
  AZURE_SERVICEBUS_NAME: webapparmtestservicebus
  AZURE_SERVICEBUS_QUEUE_NAME: queue

  # tags
  AZURE_TAGS: '{ "tag11" : "value11", "tag22" : "value22", "tag33" : "value33" }'

jobs:
  ensureGitHubConfigurationValid:
    runs-on: ubuntu-latest
    steps:
      - name: Check AZURE_SUBSCRIPTION_ID
        env: 
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        if: ${{ env.AZURE_SUBSCRIPTION_ID == '' }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('AZURE_SUBSCRIPTION_ID must be set!')

# Ensure AD credentials are created and added into secrets. The below command can generate it.
# az ad sp create-for-rbac --name "{sp-name}" --sdk-auth --role contributor \
# --scopes /subscriptions/{subscription-id}
      - name: Check AZURE_CREDENTIALS
        env: 
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        if: ${{ env.AZURE_CREDENTIALS == '' }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('AZURE_CREDENTIALS must be set!')

        # must be a better approach to use json configuration
      - name: Save tags to json
        run: |
          echo '${{ env.AZURE_TAGS }}' > shared_azure_tags.json
        # must be a better approach to use json configuration
      - uses: actions/upload-artifact@v4
        with:
          name: shared_azure_tags
          path: shared_azure_tags.json

  ensureAzureResourceGroupConfigured:
    needs: ensureGitHubConfigurationValid
    runs-on: ubuntu-latest
    steps:
# 1. Created registration in AD
# 2. Added created AD ap into IAM subscription
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Azure CLI Create resource group
        uses: azure/CLI@v1
        if: success()
        with:
          azcliversion: 2.30.0
          inlineScript: |
            groupName=${{ env.AZURE_RESOURCE_GROUP_NAME }}
            location=${{ env.AZURE_LOCATION }}
            if [ $(az group exists --name $groupName) = false ]; then
              az group create --name $groupName --location $location
              echo "Resource group $groupName has been created"
            else
              echo "Resource group $groupName already exists"
            fi

  setupWebApi:
    needs: ensureAzureResourceGroupConfigured
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.value }}
    steps:
      - id: matrix
        run: |
          echo "value=[\"${{ env.AZURE_WEBAPI_NAME }}\", \"${{ env.AZURE_UI_NAME }}\", \"${{ env.AZURE_BACKGROUND_API_NAME }}\"]" >> $GITHUB_OUTPUT
      - run: |
          echo "${{ steps.matrix.outputs.value }}"

  ensureAzureWebAppConfigured:
    needs: setupWebApi
    runs-on: ubuntu-latest
    strategy:
      matrix:
        value: ${{fromJSON(needs.setupWebApi.outputs.matrix)}}
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Checkout code
        uses: actions/checkout@v3

      # TODO: move date to global level
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d%H%M%S')"

      - uses: actions/download-artifact@v4
        with:
          name: shared_azure_tags

      - name: Azure CLI Create Web App
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
            armTemplatePath=DeploymentTemplates/webApi/template.json
            armTemplateParams=DeploymentTemplates/webApi/parameters.json
            echo "Arm Template: ${armTemplatePath}"

            groupName=${{ env.AZURE_RESOURCE_GROUP_NAME }}
            webAppName=${{ matrix.value }}
            date=${{ steps.date.outputs.date }}
            deploymentName="$webAppName$date"

            echo "Creating $webAppName (deployment $deploymentName, tags file $tags).."
            az deployment group create \
            --resource-group $groupName \
            --name $deploymentName \
            --template-file $armTemplatePath \
            --parameters $armTemplateParams \
            --parameters subscriptionId=${{ secrets.AZURE_SUBSCRIPTION_ID }} \
            --parameters name=$webAppName \
            --parameters resourceGroupName=$groupName \
            --parameters location=${{ env.AZURE_LOCATION }} \
            --parameters hostingPlanName=${{ env.AZURE_HOSTING_PLAN }} \
            --parameters serverFarmResourceGroup=$groupName \
            --parameters resourceTags=@shared_azure_tags.json \

  ensureAzureBlobConfigured:
    runs-on: ubuntu-latest
    needs: ensureAzureResourceGroupConfigured
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: actions/checkout@v3

      # TODO: move date to global level
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d%H%M%S')"

      - uses: actions/download-artifact@v4
        with:
          name: shared_azure_tags

      - name: Azure CLI Create Blob App
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
            armTemplatePath=DeploymentTemplates/blob/template.json
            armTemplateParams=DeploymentTemplates/blob/parameters.json
            echo "Arm Template: ${armTemplatePath}"

            groupName=${{ env.AZURE_RESOURCE_GROUP_NAME }}
            blobName=${{ env.AZURE_BLOB_NAME }}
            echo "Azure blob to create: $blobName"
            date=${{ steps.date.outputs.date }}
            deploymentName="$blobName$date"

            echo "Creating $blobName.."
            az deployment group create \
            --resource-group $groupName \
            --name $deploymentName \
            --template-file $armTemplatePath \
            --parameters $armTemplateParams \
            --parameters storageAccountName=$blobName \
            --parameters location=${{ env.AZURE_LOCATION }} \
            --parameters resourceTags=@shared_azure_tags.json \

      - name: Azure CLI Create Blob Container
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
            containerName=${{ env.AZURE_BLOB_CONTAINER_NAME }}

            groupName=${{ env.AZURE_RESOURCE_GROUP_NAME }}
            blobName=${{ env.AZURE_BLOB_NAME }}
            connectionString=$(az storage account show-connection-string --name $blobName --resource-group $groupName --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}| jq -r .connectionString)
            echo $connectionString

            # TODO: validate whether it's already created
            #container_exists=$(az storage container exists --name $containerName --connection-string "$storage_connection_string")
            az storage container create \
            --name $containerName \
            --connection-string $connectionString \
            --public-access off

  ensureAzureServiceBusConfigured:
    runs-on: ubuntu-latest
    needs: ensureAzureResourceGroupConfigured
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: actions/checkout@v3

      # TODO: move date to global level
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d%H%M%S')"

      - uses: actions/download-artifact@v4
        with:
          name: shared_azure_tags

      - name: Azure CLI Create Service Bus
        uses: azure/CLI@v1
        with:
          azcliversion: 2.30.0
          inlineScript: |
            armTemplatePath=DeploymentTemplates/serviceBus/template.json
            armTemplateParams=DeploymentTemplates/serviceBus/parameters.json
            echo "Arm Template: ${armTemplatePath}"

            groupName=${{ env.AZURE_RESOURCE_GROUP_NAME }}
            serviceBusName=${{ env.AZURE_SERVICEBUS_NAME }}
            queueName=${{ env.AZURE_SERVICEBUS_QUEUE_NAME }}
            echo "Azure blob to create: $serviceBusName"
            date=${{ steps.date.outputs.date }}
            deploymentName="$serviceBusName$date"

            echo "Creating $serviceBusName.."
            az deployment group create \
            --resource-group $groupName \
            --template-file $armTemplatePath \
            --name $deploymentName \
            --parameters $armTemplateParams \
            --parameters serviceBusNamespaceName=$serviceBusName \
            --parameters serviceBusQueueName=$queueName \
            --parameters resourceTags=@shared_azure_tags.json \